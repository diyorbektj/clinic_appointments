from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from services.ai_analyzer import analyze_symptoms
from services.doctor_matcher import find_available_doctors
from services.appointment_api import create_appointment

class AppointmentStates(StatesGroup):
    waiting_symptoms = State()
    waiting_doctor_choice = State()
    waiting_name = State()
    waiting_phone = State()

def register_appointment_handlers(dp: Dispatcher):
    dp.register_message_handler(start_appointment, commands="start", state="*")
    dp.register_message_handler(process_symptoms, state=AppointmentStates.waiting_symptoms)
    dp.register_message_handler(process_doctor_choice, state=AppointmentStates.waiting_doctor_choice)
    dp.register_message_handler(process_name, state=AppointmentStates.waiting_name)
    dp.register_message_handler(process_phone, state=AppointmentStates.waiting_phone)

async def start_appointment(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?")
    await AppointmentStates.waiting_symptoms.set()

async def process_symptoms(message: types.Message, state: FSMContext):
    symptoms = message.text
    print(symptoms)
    result = await analyze_symptoms(symptoms)
    print(result)
    doctors = await find_available_doctors(result["specialty"])

    if not doctors:
        await message.answer("üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–∞—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.finish()
        return

    text = f"üîç –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–º–ø—Ç–æ–º–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {result['specialty']}\n"
    for i, doc in enumerate(doctors, 1):
        time_range = f"{doc['start_time']} - {doc['end_time']}"
        text += f"{i}. {doc['name']} ‚Äî {time_range}\n"

    await message.answer(text + "\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–º–µ—Ä.")
    await state.update_data(doctors=doctors)
    await AppointmentStates.waiting_doctor_choice.set()

async def process_doctor_choice(message: types.Message, state: FSMContext):
    data = await state.get_data()
    doctors = data["doctors"]

    try:
        index = int(message.text) - 1
        selected = doctors[index]
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await state.update_data(doctor=selected)
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await AppointmentStates.waiting_name.set()

async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?")
    await AppointmentStates.waiting_phone.set()

async def process_phone(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        phone = message.text

        appointment = await create_appointment({
            "doctor": data["doctor"],
            "name": data["name"],
            "phone": phone
        })

        await message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üë§ {data['name']}\n"
            f"üë®‚Äç‚öïÔ∏è {data['doctor']['name']}\n"
            f"üìÖ {data['doctor']['start_time']}\n"
            f"üìû {phone}\n"
            f"üè• –ê–¥—Ä–µ—Å: —É–ª. –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è, 15"
        )
        await state.finish()

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")


